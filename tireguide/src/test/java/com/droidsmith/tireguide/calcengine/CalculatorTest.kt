package com.droidsmith.tireguide.calcengine

import org.junit.Assert.assertTrue
import org.junit.Test
import org.junit.runner.RunWith
import org.junit.runners.Parameterized
import kotlin.math.roundToInt

@RunWith(Parameterized::class)
class CalculatorTest(private val loadWeight: Double, private val tireWidth: String, private val psi: Double) {
	private var calculator: Calculator = Calculator()

	companion object {
		@JvmStatic
		@Parameterized.Parameters(name = "{index}: Test with loadWeight={0}, tireWidth={1}, psi: {2}")
		fun data(): Collection<Array<Any>> {
			return listOf(
				arrayOf(0.0, "20", -11),
				arrayOf(8.0, "20", 0),
				arrayOf(50.0, "20", 57),
				arrayOf(100.0, "20", 125),
				arrayOf(63.9, "20", 76),
				arrayOf(77.4, "20", 95),
				arrayOf(84.15, "20", 104),
				arrayOf(85.2, "20", 105),
				arrayOf(91.8, "20", 114),
				arrayOf(102.6, "20", 129),
				arrayOf(103.2, "20", 130),
				arrayOf(105.3, "20", 133),
				arrayOf(112.2, "20", 142),
				arrayOf(122.4, "20", 156),
				arrayOf(136.9, "20", 176),
				arrayOf(140.4, "20", 180),
				arrayOf(0.0, "21", 0),
				arrayOf(50.0, "21", 59),
				arrayOf(100.0, "21", 118),
				arrayOf(63.9, "21", 76),
				arrayOf(77.4, "21", 91),
				arrayOf(84.15, "21", 99),
				arrayOf(85.2, "21", 101),
				arrayOf(91.8, "21", 108),
				arrayOf(102.6, "21", 121),
				arrayOf(103.2, "21", 122),
				arrayOf(105.3, "21", 124),
				arrayOf(112.2, "21", 133),
				arrayOf(122.4, "21", 145),
				arrayOf(136.9, "21", 162),
				arrayOf(140.4, "21", 166),
				arrayOf(0.0, "22", -6),
				arrayOf(5.0, "22", 0),
				arrayOf(50.0, "22", 52),
				arrayOf(100.0, "22", 111),
				arrayOf(63.9, "22", 68),
				arrayOf(77.4, "22", 84),
				arrayOf(84.15, "22", 92),
				arrayOf(85.2, "22", 93),
				arrayOf(91.8, "22", 101),
				arrayOf(102.6, "22", 114),
				arrayOf(103.2, "22", 114),
				arrayOf(105.3, "22", 117),
				arrayOf(112.2, "22", 125),
				arrayOf(122.4, "22", 137),
				arrayOf(136.9, "22", 154),
				arrayOf(140.4, "22", 158),
				arrayOf(0.0, "23", -9),
				arrayOf(8.0, "23", 0),
				arrayOf(50.0, "23", 47),
				arrayOf(100.0, "23", 104),
				arrayOf(63.9, "23", 63),
				arrayOf(77.4, "23", 78),
				arrayOf(84.15, "23", 86),
				arrayOf(85.2, "23", 87),
				arrayOf(91.8, "23", 95),
				arrayOf(102.6, "23", 107),
				arrayOf(103.2, "23", 108),
				arrayOf(105.3, "23", 110),
				arrayOf(112.2, "23", 118),
				arrayOf(122.4, "23", 130),
				arrayOf(136.9, "23", 146),
				arrayOf(140.4, "23", 150),
				arrayOf(0.0, "24", -10),
				arrayOf(10.0, "24", 0),
				arrayOf(50.0, "24", 42),
				arrayOf(100.0, "24", 95),
				arrayOf(63.9, "24", 57),
				arrayOf(77.4, "24", 71),
				arrayOf(84.15, "24", 78),
				arrayOf(85.2, "24", 79),
				arrayOf(91.8, "24", 86),
				arrayOf(102.6, "24", 98),
				arrayOf(103.2, "24", 98),
				arrayOf(105.3, "24", 101),
				arrayOf(112.2, "24", 108),
				arrayOf(122.4, "24", 119),
				arrayOf(136.9, "24", 134),
				arrayOf(140.4, "24", 138),
				arrayOf(0.0, "25", -13),
				arrayOf(13.0, "25", 0),
				arrayOf(50.0, "25", 37),
				arrayOf(100.0, "25", 87),
				arrayOf(63.9, "25", 51),
				arrayOf(77.4, "25", 64),
				arrayOf(84.15, "25", 71),
				arrayOf(85.2, "25", 72),
				arrayOf(91.8, "25", 79),
				arrayOf(102.6, "25", 90),
				arrayOf(103.2, "25", 90),
				arrayOf(105.3, "25", 92),
				arrayOf(112.2, "25", 99),
				arrayOf(122.4, "25", 109),
				arrayOf(136.9, "25", 124),
				arrayOf(140.4, "25", 127),
				arrayOf(0.0, "26", -13),
				arrayOf(13.0, "26", 0),
				arrayOf(50.0, "26", 35),
				arrayOf(100.0, "26", 83),
				arrayOf(63.9, "26", 48),
				arrayOf(77.4, "26", 61),
				arrayOf(84.15, "26", 68),
				arrayOf(85.2, "26", 69),
				arrayOf(91.8, "26", 75),
				arrayOf(102.6, "26", 85),
				arrayOf(103.2, "26", 86),
				arrayOf(105.3, "26", 88),
				arrayOf(112.2, "26", 94),
				arrayOf(122.4, "26", 104),
				arrayOf(136.9, "26", 118),
				arrayOf(140.4, "26", 121),
				arrayOf(0.0, "27", -8),
				arrayOf(10.0, "27", 0),
				arrayOf(50.0, "27", 36),
				arrayOf(100.0, "27", 80),
				arrayOf(63.9, "27", 48),
				arrayOf(77.4, "27", 60),
				arrayOf(84.15, "27", 66),
				arrayOf(85.2, "27", 67),
				arrayOf(91.8, "27", 73),
				arrayOf(102.6, "27", 82),
				arrayOf(103.2, "27", 83),
				arrayOf(105.3, "27", 85),
				arrayOf(112.2, "27", 91),
				arrayOf(122.4, "27", 100),
				arrayOf(136.9, "27", 113),
				arrayOf(140.4, "27", 116),
				arrayOf(0.0, "28", -6),
				arrayOf(8.0, "28", 0),
				arrayOf(50.0, "28", 34),
				arrayOf(100.0, "28", 74),
				arrayOf(63.9, "28", 45),
				arrayOf(77.4, "28", 56),
				arrayOf(84.15, "28", 61),
				arrayOf(85.2, "28", 62),
				arrayOf(91.8, "28", 67),
				arrayOf(102.6, "28", 76),
				arrayOf(103.2, "28", 76),
				arrayOf(105.3, "28", 78),
				arrayOf(112.2, "28", 84),
				arrayOf(122.4, "28", 92),
				arrayOf(136.9, "28", 103),
				arrayOf(140.4, "28", 106),
				arrayOf(0.0, "", 0),
				arrayOf(50.0, "", 0),
				arrayOf(100.0, "", 0),
				arrayOf(0.0, "29", 0),
				arrayOf(50.0, "29", 0),
				arrayOf(100.0, "29", 0)
			)
		}
	}

	@Test
	fun whenCalculatingTirePressure_WithValidInput_ThenCorrectPressureIsGiven() {
		assertTrue(arePsiEqual(psi, calculator.psi(loadWeight, tireWidth)))
	}

	private fun arePsiEqual(expectedPsi: Double, testPsi: Double): Boolean {
		return expectedPsi.roundToInt().toDouble() == testPsi
	}
}
